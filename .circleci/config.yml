version: 2.1
orbs:
  architect: giantswarm/architect@0.10.0

jobs:
  checkout_code:
    machine: true
    working_directory: ~/giantswarm-todo
    steps:
      - checkout
      - run: docker run -v $(pwd):/workdir --workdir /workdir --rm quay.io/giantswarm/architect:latest project version > api-server/.version
      - run: cat api-server/.version
      - run: cp api-server/.version todo-manager/
      - save_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}-<< pipeline.git.tag >>
          paths:
            - ~/giantswarm-todo
  build_apiserver:
    machine: true
    working_directory:
      ~/giantswarm-todo/api-server
    steps:
      - restore_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}-<< pipeline.git.tag >>
      - run: cat .version
      - run: IMG_VER=$(cat .version) make docker-build
      - run: echo -n "${QUAY_PASSWORD}" | docker login --username "${QUAY_USERNAME}" --password-stdin quay.io 
      - run: IMG_VER=$(cat .version) make docker-push
  build_todomanager:
    machine: true
    working_directory:
      ~/giantswarm-todo/todo-manager
    steps:
      - restore_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}-<< pipeline.git.tag >>
      - run: cat .version
      - run: IMG_VER=$(cat .version) make docker-build
      - run: echo -n "${QUAY_PASSWORD}" | docker login --username "${QUAY_USERNAME}" --password-stdin quay.io 
      - run: IMG_VER=$(cat .version) make docker-push
  run_kat_tests:
    machine:
      image: ubuntu-1604:201903-01
    working_directory:
      ~/giantswarm-todo
    steps:
      - restore_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}-<< pipeline.git.tag >>
      - run: pyenv versions
      - run: pyenv global 3.7.0
      - run: python --version
      - run: pip install pipenv aws-shell
      - run: curl -Lo /tmp/kind "https://github.com/kubernetes-sigs/kind/releases/download/v0.7.0/kind-$(uname)-amd64"
      - run: chmod +x /tmp/kind
      - run: curl -Lo /tmp/helm.tar.gz https://get.helm.sh/helm-v2.16.5-linux-amd64.tar.gz
      - run: tar zxf /tmp/helm.tar.gz -C /tmp && mv /tmp/linux-amd64/helm /tmp/helm
      - run: /tmp/helm init -c
      - run: curl -Lo /tmp/kind-app-testing.sh -q https://raw.githubusercontent.com/giantswarm/kube-app-testing/gs-cluster-support/kube-app-testing.sh
      - run: chmod +x /tmp/kind-app-testing.sh
      - run: curl -Lo /tmp/kubectl https://storage.googleapis.com/kubernetes-release/release/v1.18.0/bin/linux/amd64/kubectl
      - run: chmod +x /tmp/kubectl
      - run:
          command: PATH="/tmp:$PATH" kind-app-testing.sh -c giantswarm-todo-app -t giantswarm --cluster-name wealdy-test -a ${GS_API_KEY} -r ${GS_RELEASE} --availability-zone ${GS_AVAILABILITY_ZONE} --giantswarm-api-url ${GS_API_URL}
          environment:
            AWS_ACCESS_KEY_ID: ${CI_AWS_ACCESS_KEY_ID}
            AWS_SECRET_ACCESS_KEY: ${CI_AWS_SECRET_ACCESS_KEY}
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
      - run:
          name: Cleanup resources
          command: PATH="/tmp:$PATH" kind-app-testing.sh -a ${GS_API_KEY}
          when: on_fail

workflows:
  version: 2
  build:
    jobs:
      - checkout_code:
          filters:
            tags:
              only: /^v.*/
      - build_apiserver:
          requires:
            - checkout_code
          filters:
            tags:
              only: /^v.*/
      - build_todomanager:
          requires:
            - checkout_code
          filters:
            tags:
              only: /^v.*/
      - run_kat_tests:
          requires:
            - build_apiserver
            - build_todomanager
      - architect/push-to-app-catalog:
          name: "package and push giantswarm-todo-app chart"
          requires:
            - "run_kat_tests"
          app_catalog: "giantswarm-playground-catalog"
          app_catalog_test: "giantswarm-playground-test-catalog"
          chart: "giantswarm-todo-app"
          ct_config: ".circleci/ct-config.yaml"
          # Trigger job on git tag.
          filters:
            tags:
              only: /^v.*/
